
<% layout('layout/page') -%>
<% block('title', "Чат") -%>

<p class="lead">Упс... Чат находится в стадии разработки :).</p>

<p>Добро пожаловать, <%=user.get('username')%></p>

<script src="/socket.io/socket.io.js"></script>

<div id="room">
    <ul class="list-unstyled"></ul>
    <form>
        <input class="form-control" autocomplete="off" autofocus placeholder="Сообщение...">
    </form>
</div>

<script>
    var socket = io.connect({
        auto_reconnect: false
    });

    var room = $('#room'),
            form = $('form', room),
            ul = $('ul', room),
            input = form.find(':input');


    socket
            .on('message', function (username, message) {
                printMessage(username,message , 'other');
            })
            .on("leave", function (username) {
                printStatus(username + " вышел из чата");
            })
            .on("join", function (username) {
                printStatus(username + " вошел в чат");
            })
            .on("connect", function () {
                printStatus("соединение установлено");
                form.on("submit", sendMessage);
                input.prop("disabled", false);
            })
            .on("disconnect", function (message) {
                printStatus("соединение потеряно");
                form.off("submit", sendMessage);
                input.prop("disabled", true);

                if (message == "io server disconnect") {
                    return this.emit('error', message);
                }
                this.emit('error');
            })
            .on('logout', function () {
                window.location.href = '/';
            })
            .on('error', function (reason) {
                if (reason == "handshake unauthorized") {
                    printStatus("вы вышли из сайта");
                } else {
                    setTimeout(function () {
                        socket.socket.connect();
                    }, 500);
                }
            });

    function sendMessage(e) {

        e.preventDefault();
        var text = input.val();
        socket.emit('message', text, function () {
            printMessage('Я', text, 'me');
        });
        input.val('');
    }

    function printStatus(status) {
        $('<li>').append($('<i>').text(status)).appendTo(ul);
    }

    function printMessage(name, text, cssClass){
        var message = $("<div/>",{
                 "class": cssClass + "-message"
        })

        var name = $("<span/>", {
            "class": cssClass + "-userName",
            "text": name
        })
        var textMessage = $("<span/>", {
            "class": cssClass + "-textMessage",
            "text": text
        })
        var element = $("<li/>", {
            "class": "mess-el"
        })
        name.appendTo(message);
        textMessage.appendTo(message);
        message.appendTo(element);
        element.appendTo(ul);
    }

    /*

     socket
     .on('message', function(username, message) {
     printMessage(username + "> " + message);
     })
     .on('leave', function(username) {
     printStatus(username + " вышел из чата");
     })
     .on('join', function(username) {
     printStatus(username + " вошёл в чат");
     })
     .on('connect', function() {
     printStatus("соединение установлено");
     form.on('submit', sendMessage);
     input.prop('disabled', false);
     })
     .on('disconnect', function() {
     printStatus("соединение потеряно");
     form.off('submit', sendMessage);
     input.prop('disabled', true);
     setTimeout(reconnect, 500);
     })
     .on('logout', function() {
     location.href = "/";
     })
     .on('error', function(reason) {
     if (reason == "handshake unauthorized") {
     printStatus("вы вышли из сайта");
     } else {
     setTimeout(function () {
     socket.socket.connect();
     }, 500);
     }
     });
     */
</script>